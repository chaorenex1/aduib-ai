"""11

Revision ID: 30ec504772fc
Revises: f8dcd1a71fb2
Create Date: 2025-09-17 16:11:06.123540

"""
from typing import Sequence, Union

from alembic import op
import models as models
import sqlalchemy as sa
import pgvecto_rs.sqlalchemy
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '30ec504772fc'
down_revision: Union[str, None] = 'f8dcd1a71fb2'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('knowledge_document',
    sa.Column('id', sa.UUID(), server_default=sa.text('uuid_generate_v4()'), nullable=False, comment='id'),
    sa.Column('created_at', sa.DateTime(), nullable=True, comment='create time'),
    sa.Column('updated_at', sa.DateTime(), nullable=True, comment='update time'),
    sa.Column('deleted', sa.Integer(), nullable=True, comment='delete flag'),
    sa.Column('name', sa.String(length=255), nullable=False, comment='name'),
    sa.Column('file_id', sa.String(), nullable=False, comment='file id'),
    sa.Column('rag_type', sa.String(), nullable=False, comment='rag type'),
    sa.Column('knowledge_language', sa.String(length=50), nullable=False, comment='knowledge language'),
    sa.Column('date_source_type', sa.String(), nullable=False, comment='data source type'),
    sa.Column('data_process_rule', postgresql.JSONB(astext_type=sa.Text()), nullable=True, comment='data process rule'),
    sa.Column('embedding_model', sa.String(length=255), nullable=False, comment='embedding model name'),
    sa.Column('embedding_model_provider', sa.String(length=255), nullable=False, comment='embedding provider name'),
    sa.Column('rag_status', sa.String(length=50), nullable=False, comment='rag status'),
    sa.Column('error_message', sa.String(length=255), server_default=sa.text("''"), nullable=False, comment='error message'),
    sa.Column('stop_at', sa.DateTime(), nullable=True, comment='stop at'),
    sa.Column('word_count', sa.Integer(), server_default=sa.text('0'), nullable=True, comment='word count'),
    sa.Column('extracted_at', sa.DateTime(), nullable=True, comment='extracted at'),
    sa.Column('spited_at', sa.DateTime(), nullable=True, comment='split at'),
    sa.Column('cleaned_at', sa.DateTime(), nullable=True, comment='cleaned at'),
    sa.Column('indexed_at', sa.DateTime(), nullable=True, comment='embedded at'),
    sa.Column('indexed_time', sa.Integer(), server_default=sa.text('0'), nullable=True, comment='indexed times'),
    sa.Column('token_count', sa.Integer(), server_default=sa.text('0'), nullable=True, comment='token count'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_knowledge_document_date_source_type'), 'knowledge_document', ['date_source_type'], unique=False)
    op.create_index(op.f('ix_knowledge_document_file_id'), 'knowledge_document', ['file_id'], unique=False)
    op.create_index(op.f('ix_knowledge_document_rag_type'), 'knowledge_document', ['rag_type'], unique=False)
    op.create_table('knowledge_embeddings',
    sa.Column('id', sa.UUID(), server_default=sa.text('uuid_generate_v4()'), nullable=False, comment='id'),
    sa.Column('knowledge_id', sa.UUID(), nullable=False, comment='knowledge_id'),
    sa.Column('content', sa.TEXT(), server_default=sa.text("''"), nullable=False, comment='content'),
    sa.Column('vector', pgvecto_rs.sqlalchemy.vector.VECTOR(2560), nullable=False, comment='vector'),
    sa.Column('meta', postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("'{}'"), nullable=False, comment='metadata'),
    sa.Column('hash', sa.String(length=64), nullable=False, comment='content hash'),
    sa.Column('model_name', sa.String(length=255), nullable=False, comment='embedding model name'),
    sa.Column('provider_name', sa.String(length=255), nullable=False, comment='embedding provider name'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_knowledge_embeddings_content', 'knowledge_embeddings', [sa.literal_column("to_tsvector('jieba_cfg', content)")], unique=False, postgresql_using='gin')
    op.create_index('idx_knowledge_embeddings_vector', 'knowledge_embeddings', ['vector'], unique=False, postgresql_using='vectors', postgresql_with={'options': '$$optimizing.optimizing_threads = 30\n                                segment.max_growing_segment_size = 2000\n                                segment.max_sealed_segment_size = 30000000\n                                [indexing.hnsw]\n                                m=30\n                                ef_construction=500$$'}, postgresql_ops={'vector': 'vector_l2_ops'})
    op.create_index(op.f('ix_knowledge_embeddings_knowledge_id'), 'knowledge_embeddings', ['knowledge_id'], unique=False)
    op.create_table('knowledge_keywords',
    sa.Column('id', sa.UUID(), server_default=sa.text('uuid_generate_v4()'), nullable=False, comment='id'),
    sa.Column('doc_id', sa.UUID(), nullable=False, comment='doc_id'),
    sa.Column('keyword', sa.String(length=255), nullable=False, comment='keyword'),
    sa.Column('created_at', sa.DateTime(), nullable=True, comment='create time'),
    sa.Column('updated_at', sa.DateTime(), nullable=True, comment='update time'),
    sa.Column('deleted', sa.Integer(), nullable=True, comment='delete flag'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_knowledge_keywords_doc_id'), 'knowledge_keywords', ['doc_id'], unique=False)
    op.create_index(op.f('ix_knowledge_keywords_keyword'), 'knowledge_keywords', ['keyword'], unique=False)
    op.add_column('model', sa.Column('default', sa.Integer(), server_default='0', nullable=True, comment='Is Default Model'))
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_column('model', 'default')
    op.drop_index(op.f('ix_knowledge_keywords_keyword'), table_name='knowledge_keywords')
    op.drop_index(op.f('ix_knowledge_keywords_doc_id'), table_name='knowledge_keywords')
    op.drop_table('knowledge_keywords')
    op.drop_index(op.f('ix_knowledge_embeddings_knowledge_id'), table_name='knowledge_embeddings')
    op.drop_index('idx_knowledge_embeddings_vector', table_name='knowledge_embeddings', postgresql_using='vectors', postgresql_with={'options': '$$optimizing.optimizing_threads = 30\n                                segment.max_growing_segment_size = 2000\n                                segment.max_sealed_segment_size = 30000000\n                                [indexing.hnsw]\n                                m=30\n                                ef_construction=500$$'}, postgresql_ops={'vector': 'vector_l2_ops'})
    op.drop_index('idx_knowledge_embeddings_content', table_name='knowledge_embeddings', postgresql_using='gin')
    op.drop_table('knowledge_embeddings')
    op.drop_index(op.f('ix_knowledge_document_rag_type'), table_name='knowledge_document')
    op.drop_index(op.f('ix_knowledge_document_file_id'), table_name='knowledge_document')
    op.drop_index(op.f('ix_knowledge_document_date_source_type'), table_name='knowledge_document')
    op.drop_table('knowledge_document')
    # ### end Alembic commands ###
