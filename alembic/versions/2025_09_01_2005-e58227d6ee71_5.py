"""5

Revision ID: e58227d6ee71
Revises: 499d62ab5fa2
Create Date: 2025-09-01 20:05:34.615496

"""
from typing import Sequence, Union

import sqlalchemy as sa
from alembic import op
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = 'e58227d6ee71'
down_revision: Union[str, None] = '499d62ab5fa2'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column('conversation_message', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               comment='create time',
               existing_comment='api key create time',
               existing_nullable=True)
    op.alter_column('conversation_message', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               comment='update time',
               existing_comment='api key update time',
               existing_nullable=True)
    op.alter_column('conversation_message', 'deleted',
               existing_type=sa.INTEGER(),
               comment='delete flag',
               existing_comment='api key delete flag',
               existing_nullable=True)
    op.add_column('mcp_server', sa.Column('server_url', sa.String(length=256), nullable=False))
    op.add_column('mcp_server', sa.Column('configs', sa.Text(), server_default=sa.text("'{}'"), nullable=True, comment='server configs'))
    op.add_column('mcp_server', sa.Column('credentials', sa.String(), server_default=sa.text("'none'"), nullable=True, comment='tool credentials'))
    op.alter_column('mcp_server', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               comment='create time',
               existing_comment='tool create time',
               existing_nullable=True)
    op.alter_column('mcp_server', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               comment='update time',
               existing_comment='tool update time',
               existing_nullable=True)
    op.alter_column('mcp_server', 'deleted',
               existing_type=sa.INTEGER(),
               comment='delete flag',
               existing_comment='tool delete flag',
               existing_nullable=True)
    op.drop_index(op.f('ix_mcp_server_name'), table_name='mcp_server')
    op.create_index(op.f('ix_mcp_server_name'), 'mcp_server', ['name'], unique=True)
    op.create_unique_constraint(None, 'mcp_server', ['server_url'])
    op.drop_column('mcp_server', 'parameters')
    op.alter_column('model', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               comment='create time',
               existing_comment='api key create time',
               existing_nullable=True)
    op.alter_column('model', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               comment='update time',
               existing_comment='api key update time',
               existing_nullable=True)
    op.alter_column('model', 'deleted',
               existing_type=sa.INTEGER(),
               comment='delete flag',
               existing_comment='api key delete flag',
               existing_nullable=True)
    op.alter_column('provider', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               comment='create time',
               existing_comment='api key create time',
               existing_nullable=True)
    op.alter_column('provider', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               comment='update time',
               existing_comment='api key update time',
               existing_nullable=True)
    op.alter_column('provider', 'deleted',
               existing_type=sa.INTEGER(),
               comment='delete flag',
               existing_comment='api key delete flag',
               existing_nullable=True)
    op.alter_column('tool_call_result', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               comment='create time',
               existing_comment='api key create time',
               existing_nullable=True)
    op.alter_column('tool_call_result', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               comment='update time',
               existing_comment='api key update time',
               existing_nullable=True)
    op.alter_column('tool_call_result', 'deleted',
               existing_type=sa.INTEGER(),
               comment='delete flag',
               existing_comment='api key delete flag',
               existing_nullable=True)
    op.alter_column('tool_info', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               comment='create time',
               existing_comment='tool create time',
               existing_nullable=True)
    op.alter_column('tool_info', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               comment='update time',
               existing_comment='tool update time',
               existing_nullable=True)
    op.alter_column('tool_info', 'deleted',
               existing_type=sa.INTEGER(),
               comment='delete flag',
               existing_comment='tool delete flag',
               existing_nullable=True)
    op.drop_constraint(op.f('tool_info_name_key'), 'tool_info', type_='unique')
    op.create_index(op.f('ix_tool_info_name'), 'tool_info', ['name'], unique=True)
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_tool_info_name'), table_name='tool_info')
    op.create_unique_constraint(op.f('tool_info_name_key'), 'tool_info', ['name'])
    op.alter_column('tool_info', 'deleted',
               existing_type=sa.INTEGER(),
               comment='tool delete flag',
               existing_comment='delete flag',
               existing_nullable=True)
    op.alter_column('tool_info', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               comment='tool update time',
               existing_comment='update time',
               existing_nullable=True)
    op.alter_column('tool_info', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               comment='tool create time',
               existing_comment='create time',
               existing_nullable=True)
    op.alter_column('tool_call_result', 'deleted',
               existing_type=sa.INTEGER(),
               comment='api key delete flag',
               existing_comment='delete flag',
               existing_nullable=True)
    op.alter_column('tool_call_result', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               comment='api key update time',
               existing_comment='update time',
               existing_nullable=True)
    op.alter_column('tool_call_result', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               comment='api key create time',
               existing_comment='create time',
               existing_nullable=True)
    op.alter_column('provider', 'deleted',
               existing_type=sa.INTEGER(),
               comment='api key delete flag',
               existing_comment='delete flag',
               existing_nullable=True)
    op.alter_column('provider', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               comment='api key update time',
               existing_comment='update time',
               existing_nullable=True)
    op.alter_column('provider', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               comment='api key create time',
               existing_comment='create time',
               existing_nullable=True)
    op.alter_column('model', 'deleted',
               existing_type=sa.INTEGER(),
               comment='api key delete flag',
               existing_comment='delete flag',
               existing_nullable=True)
    op.alter_column('model', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               comment='api key update time',
               existing_comment='update time',
               existing_nullable=True)
    op.alter_column('model', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               comment='api key create time',
               existing_comment='create time',
               existing_nullable=True)
    op.add_column('mcp_server', sa.Column('parameters', sa.TEXT(), autoincrement=False, nullable=True, comment='tool parameters'))
    op.drop_constraint(None, 'mcp_server', type_='unique')
    op.drop_index(op.f('ix_mcp_server_name'), table_name='mcp_server')
    op.create_index(op.f('ix_mcp_server_name'), 'mcp_server', ['name'], unique=False)
    op.alter_column('mcp_server', 'deleted',
               existing_type=sa.INTEGER(),
               comment='tool delete flag',
               existing_comment='delete flag',
               existing_nullable=True)
    op.alter_column('mcp_server', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               comment='tool update time',
               existing_comment='update time',
               existing_nullable=True)
    op.alter_column('mcp_server', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               comment='tool create time',
               existing_comment='create time',
               existing_nullable=True)
    op.drop_column('mcp_server', 'credentials')
    op.drop_column('mcp_server', 'configs')
    op.drop_column('mcp_server', 'server_url')
    op.alter_column('conversation_message', 'deleted',
               existing_type=sa.INTEGER(),
               comment='api key delete flag',
               existing_comment='delete flag',
               existing_nullable=True)
    op.alter_column('conversation_message', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               comment='api key update time',
               existing_comment='update time',
               existing_nullable=True)
    op.alter_column('conversation_message', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               comment='api key create time',
               existing_comment='create time',
               existing_nullable=True)
    # ### end Alembic commands ###
